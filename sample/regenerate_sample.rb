require '../lib/swfmill_ruby'
require 'pp'

#################################################################################
# test to regenerate swf using partial movieclip

# initialize original swf by preserved xml generated by Swfmill::swf2xml.
# avoid analysing swf's structure using "template_mode".
swf = SwfmillUtil::Swf.parseXml(File.open("data/sample_template.xml").read, true)

# initialize template movieclip by preserved xml generated by DefineSprite#partialize
# avoid analysing swf's structure using "template_mode".
animation = SwfmillUtil::DefineSprite.parseXml(File.open("data/animation_partial.xml").read, true)

# check a target object_id
pp swf.movieclip_ids_named("animation") #=> ["5"]

# change movieclip
swf.movieclips["5"] = animation

# write swf changed movieclip.
# avoid adjusting object_id using "adjustment=false"
swf.write("data/regenerated.swf", false)


#################################################################################
# test to regenerate swf using templatized swf
#  - more speedy than using xml parser

File.open("data/regenerated_gsub.swf", "w") do |f|
  f.puts SwfmillUtil::Swfmill.xml2swf(File.open("data/animation_template_gsub.xml").read.gsub(/####PARTIAL_MOVIECLIP_5####/, File.open("data/animation_partial_gsub.xml").read))
end
